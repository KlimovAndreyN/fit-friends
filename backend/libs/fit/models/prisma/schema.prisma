// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_DATABASE_URL")
  // на windows при команде "npx nx run fit:db:migrate" не вводит для название migrate
  // работает "npx nx run fit:db:migrate --name=init"
  // или
  // cd backend
  // cd libs/fit/models/prisma
  // npx prisma migrate dev --schema ./schema.prisma --skip-generate --skip-seed
  // cd ../../../..
}

model Questionnaire {
  userId             String   @id @unique @map("user_id") @db.VarChar(50) //! @id для того чтобы можно было в pgAdmin редактировать
  specializations    String[] @map("specializations") @db.VarChar(50) //! сработает ограниечение на каждый элемент или на все?
  trainingLevel      String   @map("training_level") @db.VarChar(50)
  readyForTraining   Boolean  @map("ready_for_training")
  time               String?  @map("time") @db.VarChar(50)
  caloriesLose       Int?     @map("calories_lose")
  caloriesWaste      Int?     @map("calories_waste")
  fileIds            String[] @map("file_ids") @db.VarChar(50) //! сработает ограниечение на каждый элемент или на все?
  description        String?  @map("description") @db.VarChar(5000)
  individualTraining Boolean? @map("individual_training")

  @@index([userId])
  @@map("questionnaires")
}
